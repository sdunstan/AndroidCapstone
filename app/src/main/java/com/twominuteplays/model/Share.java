package com.twominuteplays.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.google.firebase.database.Exclude;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class Share implements Parcelable {
    private static final String TAG = Share.class.getName();
    /**
     * Sequence number generated by Firebase.
     */
    private Long id;
    private String state;
    /**
     * Movie template ID (not the movie clone ID.)
     */
    private String movieTemplateId;
    /**
     * Firebase path to the original movie that was shated.
     */
    private String originalMoviePath;

    /**
     * Part recorded by the owner of the movie.
     */
    private String ownersPartId;

    /**
     * Part the contributors can record.
     */
    private String contributorsPartId;

    /**
     * the owner's cip collection with key of lineId and value of clip GCS path.
     */
    private Contributions ownersClips;

    /**
     * key is contributor UID
     */
    private Map<String,Contributions> contributors;

    public Share() {
    }

    public Share(Map<String,Object> map) {
        this.id = Long.valueOf(mapValue(map.get("id")));
        this.state = mapValue(map.get("state"));
        this.ownersPartId = mapValue(map.get("ownersPartId"));
        this.movieTemplateId = mapValue(map.get("movieTemplateId"));
        this.originalMoviePath = mapValue(map.get("originalMoviePath"));
        this.ownersPartId = mapValue(map.get("ownersPartId"));
        this.contributorsPartId = mapValue(map.get("contributorsPartId"));
        this.ownersClips = new Contributions((Map<String,Object>)map.get("ownersClips"));
        Map<String,Object> contributorsMap = (Map<String,Object>) map.get("contributors");
        if (contributorsMap != null) {
            for(String contributorId : contributorsMap.keySet()) {
                getContributors().put(contributorId,
                        new Contributions((Map<String,Object>)contributorsMap.get(contributorId)));
            }
        }
    }

    private String mapValue(Object value) {
        if (value == null)
            return null;
        else
            return value.toString();
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getState() { return state; }

    public void setState(String state) { this.state = state; }

    @Exclude
    public State getShareState() { return State.valueOf(this.state); }

    @Exclude
    public void setShareState(State shareState) { this.state = shareState.name(); }

    public String getMovieTemplateId() {
        return movieTemplateId;
    }

    public void setMovieTemplateId(String movieTemplateId) {
        this.movieTemplateId = movieTemplateId;
    }

    public String getOriginalMoviePath() {
        return originalMoviePath;
    }

    public void setOriginalMoviePath(String originalMoviePath) {
        this.originalMoviePath = originalMoviePath;
    }

    public String getOwnersPartId() {
        return ownersPartId;
    }

    public void setOwnersPartId(String ownersPartId) {
        this.ownersPartId = ownersPartId;
    }

    public String getContributorsPartId() {
        return contributorsPartId;
    }

    public void setContributorsPartId(String contributorsPartId) {
        this.contributorsPartId = contributorsPartId;
    }

    public Contributions getOwnersClips() {
        return ownersClips;
    }

    public void setOwnersClips(Contributions ownersClips) {
        this.ownersClips = ownersClips;
    }

    public Map<String, Contributions> getContributors() {
        if (contributors == null) {
            contributors = Collections.synchronizedMap(new HashMap<String,Contributions>());
        }
        return contributors;
    }

    public void setContributors(Map<String, Contributions> contributors) {
        this.contributors = contributors;
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeValue(this.id);
        dest.writeString(this.state);
        dest.writeString(this.movieTemplateId);
        dest.writeString(this.originalMoviePath);
        dest.writeString(this.ownersPartId);
        dest.writeString(this.contributorsPartId);
        dest.writeParcelable(this.ownersClips, flags);
        dest.writeInt(this.contributors.size());
        for (Map.Entry<String, Contributions> entry : this.contributors.entrySet()) {
            dest.writeString(entry.getKey());
            dest.writeParcelable(entry.getValue(), flags);
        }
    }

    protected Share(Parcel in) {
        this.id = (Long) in.readValue(Long.class.getClassLoader());
        this.state = in.readString();
        this.movieTemplateId = in.readString();
        this.originalMoviePath = in.readString();
        this.ownersPartId = in.readString();
        this.contributorsPartId = in.readString();
        this.ownersClips = in.readParcelable(Contributions.class.getClassLoader());
        int contributorsSize = in.readInt();
        this.contributors = new HashMap<String, Contributions>(contributorsSize);
        for (int i = 0; i < contributorsSize; i++) {
            String key = in.readString();
            Contributions value = in.readParcelable(Contributions.class.getClassLoader());
            this.contributors.put(key, value);
        }
    }

    public static final Parcelable.Creator<Share> CREATOR = new Parcelable.Creator<Share>() {
        @Override
        public Share createFromParcel(Parcel source) {
            return new Share(source);
        }

        @Override
        public Share[] newArray(int size) {
            return new Share[size];
        }
    };

    public enum State {
        CREATED,
        CONTRIBUTOR_MEIDA_ADDED,
        OWNER_MEDIA_ADDED;
    }
}
